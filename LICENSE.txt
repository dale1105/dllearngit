#git 步骤：
#1.git init创建空的仓库
#2.git add把文件添加到仓库:把要提交的所有文件放到暂存区（stage）
#3.git commit提交 -m 本次提交的说明：把暂存区的所有修改提交到分支

#4.git status命令让我们掌握仓库当前状态，有修改，但是没有准备好提交
#5.git diff ：查看difference

#更新提交
#1.git add readme.txt
#2.git commit

#回滚 :
#1.git log:查看日志--pretty=oneline，精简成1行
#2.git reset：回滚
#3.HEAD表示当前版本，HEAD^表示上个版本，HEAD^^表示上上个版本，HEAD~100表示上100个版本
#4.git reflog：记录你的每一次提交

#版本库：.git目录，最重要的就是stage（index）的暂存区，还有第一个分支master，指向master的一个指针HEAD

#git是追踪修改的
#git diff HEAD -- readme.txt:查看工作区和版本库里面最新版本的区别

#git checkout -- file:可以丢弃工作区的修改，让文件回到最近一次git commit或git add
#如果--没有，就变成“切换到另一个分支”的命令。

#git reset HEAD <file>：可以把暂存区的修改撤销掉，重新放回工作区，再次清除，需要用到git checkout

#git 删除：直接在文件管理器中把没用的文件删除，或者用rm命令删除
#如果确实要从版本库中删除该文件，就用命令git rm删掉，并且git commit。

#git push：把当前分支master推送到远程，第一次推送添加了-u参数，不但把本地master分支内容推送到新的master分支，还会关联
#第二次时，就可以直接使用git push origin master
#要关联一个远程库，使用命令git remote add origin git@server-name:path/repo-name.git
#关联后，使用命令git push -u origin master第一次推送master分支的所有内容
#此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改

#要克隆一个仓库，首先必须知道仓库的地址，然后使用git clone命令克隆
#Git支持多种协议，包括https，但通过ssh支持的原生git协议速度最快

#git checkout命令加上-b参数表示创建并切换，相当于以下两条命令:$ git branch dev;$ git checkout dev
#用git branch命令查看当前分支,git branch命令会列出所有分支，当前分支前面会标一个*号
#git merge命令用于合并指定分支到当前分支。合并后，再查看readme.txt的内容，就可以看到，和dev分支的最新提交是完全一样的。注意到上面的Fast-forward信息，Git告诉我们，这次合并是“快进模式”，也就是直接把master指向dev的当前提交，所以合并速度非常快.
#$ git branch -d dev:合并完成后，就可以放心地删除dev分支了
#查看分支：git branch
#创建分支：git branch <name>
#切换分支：git checkout <name>
#创建+切换分支：git checkout -b <name>
#合并某分支到当前分支：git merge <name>
#删除分支：git branch -d <name>

#合并分支时，加上--no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而fast forward合并就看不出来曾经做过合并

#幸好，Git还提供了一个stash功能，可以把当前工作现场“储藏”起来，等以后恢复现场后继续工作

#当手头工作没有完成时，先把工作现场git stash一下，然后去修复bug，修复后，再git stash pop，回到工作现场
#你可以多次stash，恢复的时候，先用git stash list查看，然后恢复指定的stash，用命令：$ git stash apply stash@{0}

#开发一个新feature，最好新建一个分支；如果要丢弃一个没有被合并过的分支，可以通过git branch -D <name>强行删除

#首先，可以试图用git push origin <branch-name>推送自己的修改；
#如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；
#如果合并有冲突，则解决冲突，并在本地提交；
#没有冲突或者解决掉冲突后，再用git push origin <branch-name>推送就能成功！

#命令git tag <tagname>用于新建一个标签，默认为HEAD，也可以指定一个commit id
#命令git tag -a <tagname> -m "blablabla..."可以指定标签信息
#命令git tag可以查看所有标签

#命令git push origin <tagname>可以推送一个本地标签
#命令git push origin --tags可以推送全部未推送过的本地标签
#命令git tag -d <tagname>可以删除一个本地标签
#命令git push origin :refs/tags/<tagname>可以删除一个远程标签




































